var TcHmi;!function(TcHmi){let Functions;!function(Functions){let Beckhoff;!function(Beckhoff){Beckhoff.SymbolExists=function(ctx,symbol){null!=symbol?symbol instanceof TcHmi.Symbol?symbol.exists(data=>{data.error===TcHmi.Errors.NONE?ctx.success(data.result):ctx.error(data.error,{code:data.error,message:TcHmi.Errors[data.error],reason:"Function: SymbolExists, symbol existence check failed",domain:"Function",errors:data.details?[data.details]:void 0})}):ctx.error(TcHmi.Errors.E_PARAMETER_INVALID,{code:TcHmi.Errors.E_PARAMETER_INVALID,message:TcHmi.Errors[TcHmi.Errors.E_PARAMETER_INVALID],reason:"Function: SymbolExists, parameter is no symbol.",domain:"Function"}):ctx.error(TcHmi.Errors.E_PARAMETER_INVALID,{code:TcHmi.Errors.E_PARAMETER_INVALID,message:TcHmi.Errors[TcHmi.Errors.E_PARAMETER_INVALID],reason:"Function: SymbolExists, requested symbol is not set.",domain:"Function"})}}(Beckhoff=Functions.Beckhoff||(Functions.Beckhoff={}))}(Functions=TcHmi.Functions||(TcHmi.Functions={}))}(TcHmi||(TcHmi={})),TcHmi.Functions.registerFunctionEx("SymbolExists","TcHmi.Functions.Beckhoff",TcHmi.Functions.Beckhoff.SymbolExists);